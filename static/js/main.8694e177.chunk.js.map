{"version":3,"sources":["logo.svg","component/NavigationBar/navigation.js","component/Header/header.js","component/Login/login.js","container/commonLogic.js","component/seriesList/seriesList.js","component/ScrumCards/fibonacci.js","component/ScrumCards/standard.js","component/ScrumCards/tshirt.js","component/main/index.js","component/Today/today.js","component/app/App.js","component/History/history.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Navigation","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","openNav","setState","openSideBar","state","closeNav","bind","assertThisInitialized","react_default","a","createElement","id","className","href","onClick","NavLink","exact","activeClassName","to","Component","HaaderComponent","NavigationBar_navigation","style","margin","underlineFocusStyle","background-color","color","floatingLabelFocusStyle","Common","toggleCard","item","selectedMain","selectedCard","toString","toggle","fibonacciArray","dataArray","_this2","map","key","Fibonacci","fibonacciList","commonLogic","Standard","standardList","TShirt","tshirtList","Main","Switch","Route","path","component","App","header","main","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","addEventListener","e","some","prompt","ReactDOM","render","BrowserRouter","component_app_App","document","getElementById","URL","process","origin","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8694e177.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\r\nimport './navigation.css'\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nclass Navigation extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            openSideBar: false,\r\n        }\r\n        this.openNav = this.openNav.bind(this);\r\n        this.closeNav = this.closeNav.bind(this);\r\n    }\r\n    openNav = () => {\r\n        this.setState({ openSideBar: !this.state.openSideBar })\r\n    }\r\n    closeNav = () => {\r\n        this.setState({ openSideBar: false })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div id=\"myNav\" className={this.state.openSideBar ? 'overlay openNavClass' : 'overlay closeNavClass'}>\r\n                    <a href=\"javascript:void(0)\" className=\"closebtn\" onClick={this.closeNav}>&times;</a>\r\n                    <div className=\"overlay-content\">\r\n                        <NavLink exact activeClassName='is-active' to=\"/\">Standard</NavLink>\r\n                        <NavLink activeClassName='is-active' to=\"/Fibonacci\">Fibonacci</NavLink>\r\n                        <NavLink activeClassName='is-active' to=\"/tshirt\">T-shirt</NavLink>\r\n                    </div>\r\n                </div>\r\n                <div className=\"hamburgger\">\r\n                    <span onClick={this.openNav}>&#9776;</span>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Navigation;","import React, { Component } from 'react';\r\nimport logo from '../../logo.svg';\r\nimport Navigation from '../../component/NavigationBar/navigation';\r\n\r\nclass HaaderComponent extends Component {\r\n    render() {\r\n        return (\r\n            <header className=\"App-header\">\r\n                <Navigation />\r\n                {/* <img style={{ width: 100 }} src={logo} className=\"App-logo\" alt=\"logo\" /> */}\r\n            </header>\r\n        )\r\n    }\r\n};\r\nexport default HaaderComponent;","import React, { Component } from 'react';\r\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\r\nimport AppBar from 'material-ui/AppBar';\r\nimport RaisedButton from 'material-ui/RaisedButton';\r\nimport TextField from 'material-ui/TextField';\r\nimport { fromJSON } from 'tough-cookie';\r\nimport { white } from 'material-ui/styles/colors';\r\nclass Login extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      username: '',\r\n      password: ''\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <MuiThemeProvider>\r\n        <div>\r\n          {/* <AppBar\r\n             title=\"Login\"\r\n           /> */}\r\n          <TextField floatingLabelStyle={style.floatingLabelFocusStyle}\r\n            underlineFocusStyle={style.underlineFocusStyle}\r\n            hintText=\"Enter your Username\"\r\n            floatingLabelText=\"Username\"\r\n            onChange={(event, newValue) => this.setState({ username: newValue })}\r\n          />\r\n          <br />\r\n          <TextField floatingLabelStyle={style.floatingLabelFocusStyle}\r\n            type=\"password\"\r\n            hintText=\"Enter your Password\"\r\n            floatingLabelText=\"Password\"\r\n            onChange={(event, newValue) => this.setState({ password: newValue })}\r\n          />\r\n          <br />\r\n          <RaisedButton className=\"style.floatingLabelFocusStyle\" label=\"Submit\" style={style} onClick={(event) => this.handleClick(event)} />\r\n        </div>\r\n      </MuiThemeProvider>\r\n    );\r\n  }\r\n}\r\nconst style = {\r\n  margin: 15,\r\n  underlineFocusStyle: {\r\n    \"background-color\": \"white\",\r\n    color: \"white\"\r\n  },\r\n  floatingLabelFocusStyle: {\r\n    color: \"#fb0\"\r\n  }\r\n};\r\n\r\nexport default Login;","import React, { Component } from 'react';\r\n\r\n\r\nclass Common extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            fibonacciArray: props.dataArray,\r\n            toggle: true,\r\n            selectedCard: ''\r\n        }\r\n        this.toggleCard = this.toggleCard.bind(this);\r\n    }\r\n\r\n    toggleCard = (item, selectedMain) => {\r\n        if (selectedMain) {\r\n            this.setState({ selectedCard: item.toString() })\r\n        }\r\n        this.setState({ toggle: !this.state.toggle })\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"flip\">\r\n                <div className={this.state.toggle ? 'card ' : 'card flipped'}>\r\n                    <div className=\"face front\">\r\n                        <div className=\"row inner\">\r\n                            {this.state.fibonacciArray.map(item => (\r\n                                <div className=\"col-xs-4\" key={item}>\r\n                                    <a onClick={this.toggleCard.bind(this, item, 'Main')} href=\"#\" className=\"btn btn-sq\">\r\n                                        {item}</a></div>))}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"face back\" onClick={this.toggleCard}>\r\n                        <div className=\"row inner\">\r\n                            <div className=\"col-xs-12\">\r\n                                <a onClick={this.toggleCard} href=\"#\" className=\"btn btn-sq-lg\">\r\n                                    {this.state.selectedCard}</a></div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Common; ","import React, { Component } from 'react';\r\nimport 'whatwg-fetch';\r\n\r\n\r\nclass Series extends Component {\r\n    componentDidMount() {\r\n        // let myheaders = {\r\n        //   \"Content-Type\": \"application/json\",\r\n        //   \"Authorization\": \"Basic 1 eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1c2Vycy9Uek1Vb2NNRjRwIiwiZXhwIjoxNjA5MzUzMDAwLCJuYW1lIjoiTmF2bmVldCIsInBhc3N3b3JkIjoiTmF2bmVldEAxMjMiLCJzY29wZSI6InNlbGYsZ3JvdXBzL2FkbWlucyJ9.Xs4JkdlF4FnOnglixlbhNAntLeoxtwR1hDUu8JEy03E\"\r\n        // }\r\n        fetch('https://jsonplaceholder.typicode.com/todos')\r\n            .then(resp => resp.json()).then(result => {\r\n                this.setState({ series: result });\r\n            }\r\n            );\r\n    }\r\n    state = {\r\n        series: []\r\n    }\r\n    render() {\r\n        return (\r\n            <ul>\r\n                {this.state.series.map(item => (\r\n                    <li key={item.id}>\r\n                        {item.title}\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Series;","import React, { Component } from 'react';\r\nimport './scrumCards.css';\r\nimport Common from '../../container/commonLogic';\r\n\r\nclass Fibonacci extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            fibonacciList: [\"0\", \"1/2\", \"1\", \"2\", \"3\", \"5\", \"8\", \"13\", \"21\", \"34\", \"55\", \"89\",'?'],\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <Common dataArray = {this.state.fibonacciList}  />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Fibonacci;","import React, { Component } from 'react';\r\nimport './scrumCards.css';\r\nimport Common from '../../container/commonLogic';\r\n\r\nclass Standard extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            standardList: [\"0\", \"1/2\", \"1\", \"2\", \"3\", \"5\", \"8\", \"13\", \"20\", \"40\", \"100\", '?'],\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <Common dataArray={this.state.standardList} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Standard;","import React, { Component } from 'react';\r\nimport './scrumCards.css';\r\nimport Common from '../../container/commonLogic';\r\n\r\nclass TShirt extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            tshirtList: [\"XS\", \"S\", \"M\", \"L\", \"XL\", \"XXL\", '?'],\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <Common dataArray={this.state.tshirtList} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TShirt;","import React from 'react';\r\nimport {Switch ,Route} from 'react-router-dom';\r\nimport Series from '../seriesList/seriesList'\r\nimport Fibonacci from '../../component/ScrumCards/fibonacci';\r\nimport Standard from '../../component/ScrumCards/standard';\r\nimport TShirt from '../../component/ScrumCards/tshirt';\r\n\r\n const Main = props =>(\r\n <Switch>\r\n     {/* <Route exact path = '/' component = {Series} /> */}\r\n     <Route exact path = '/fibonacci' component = {Fibonacci} />\r\n     <Route exact path = '/' component = {Standard} />\r\n     <Route exact path = '/tshirt' component = {TShirt} />\r\n </Switch>\r\n );\r\n\r\n export default Main","import React, { Component } from 'react';\r\nimport './today.css'\r\nimport axios from 'axios'\r\nimport Pusher from 'pusher-js'\r\n// import { CryptoPrice } from \"./CryptoPrice\";\r\n\r\nclass Today extends Component {\r\n\t/**\r\n\t * If you're not using the props to initialize your state, you can\r\n\t * just define the state like this and remove the constructor\r\n\t */\r\n\tstate = {\r\n\t\tbtcprice: 0, // I guess you can keep it an empty string, I just think its better to give it a default value of 0 since they're numbers\r\n\t\tltcprice: 0,\r\n\t\tethprice: 0\r\n\t};\r\n\r\n\tsendPricePusher(data) {\r\n\t\taxios.post('/prices/new', {\r\n\t\t\tprices: data\r\n\t\t})\r\n\t\t\t.then(console.log)\r\n\t\t\t.catch(console.error) // if you do (x => yourFunc(x)) you can replace it with (yourFunc)\r\n\t}\r\n\r\n\t/**\r\n\t * ComponentWillMount is deprecated and should never be used\r\n\t * The only exception is:\r\n\t * When doing Server Side Rendering, this is the only lifecycle method called\r\n\t *\r\n\t * Source: https://facebook.github.io/react/docs/react-component.html\r\n\t */\r\n\tcomponentWillMount() { }\r\n\r\n\t/**\r\n\t * Let's create utilitary functions to keep our code D.R.Y.\r\n\t * Btw, in our use case it's perfectly fine to save the entire state here\r\n\t */\r\n\tsaveStateToLocalStorage = () => {\r\n\t\tlocalStorage.setItem('today-state', JSON.stringify(this.state));\r\n\t};\r\n\r\n\trestoreStateFromLocalStorage = () => {\r\n\t\tconst state = JSON.parse(localStorage.getItem('today-state'));\r\n\t\tthis.setState(state);\r\n\t};\r\n\r\n\tcomponentDidMount() {\r\n\t\tif (!navigator.onLine) {\r\n\t\t\treturn this.restoreStateFromLocalStorage();\r\n\t\t}\r\n\t\tthis.pusher = new Pusher('cc5fc725ab70b851282b', {\r\n\t\t\tcluster: 'ap2',\r\n\t\t\tencrypted: true\r\n\t\t});\r\n\t\tthis.prices = this.pusher.subscribe('coin-prices');\r\n\t\taxios.get('https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,LTC&tsyms=USD')\r\n\t\t\t.then(({ data: { BTC, ETH, LTC } }) => { // Since we're never using responseh or data directly might aswell deconstruct it here\r\n\t\t\t\t/**\r\n\t\t\t\t * Avoid calling setStates multiple times, just do every calls in one go and let react\r\n\t\t\t\t * handle the batching\r\n\t\t\t\t */\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tbtcprice: BTC.USD,\r\n\t\t\t\t\tethprice: ETH.USD,\r\n\t\t\t\t\tltcprice: LTC.USD\r\n\t\t\t\t}, this.saveStateToLocalStorage); // You can pass a callback function to setState\r\n\r\n\t\t\t})\r\n\t\t\t.catch(console.error);\r\n\t\t// Let's store this interval in our class so that we can remove it in componentWillUnmount\r\n\t\t// this.cryptoSubscription = setInterval(() => {\r\n\t\t// \taxios.get('https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,LTC&tsyms=USD')\r\n\t\t// \t\t.then(({ data }) => { // This is a style question, I prefed doing it this way, to each its own\r\n\t\t// \t\t\tthis.sendPricePusher(data)\r\n\t\t// \t\t})\r\n\t\t// \t\t.catch(console.error)\r\n\t\t// }, 10000);\r\n\t\tthis.prices.bind('prices', ({ prices: { BTC, ETH, LTC } }) => {\r\n\t\t\tthis.setState({\r\n\t\t\t\tbtcprice: BTC.USD,\r\n\t\t\t\tethprice: ETH.USD,\r\n\t\t\t\tltcprice: LTC.USD\r\n\t\t\t}, this.saveStateToLocalStorage);\r\n\t\t}, this);\r\n\t}\r\n\r\n\tcomponentWillUnmount() {\r\n\t\tclearInterval(this.cryptoSubscription);\r\n\t}\r\n\r\n\trender() {\r\n\t\t// Let's extract everything uptop to keep our render method cleaner ;)\r\n\t\tconst { ethprice, btcprice, ltcprice } = this.state;\r\n\t\treturn (\r\n\t\t\t// <div className=\"today--section container\">\r\n\t\t\t// \t<h2>Current Price</h2>\r\n\t\t\t// \t<div className=\"columns today--section__box\">\r\n\t\t\t// \t\t{/** Creating components for things that repeat themselves is also pretty good**/}\r\n\t\t\t// \t\t<CryptoPrice currency=\"btc\" price={btcprice} />\r\n\t\t\t// \t\t<CryptoPrice currency=\"eth\" price={ethprice} />\r\n\t\t\t// \t\t<CryptoPrice currency=\"ltc\" price={ltcprice} />\r\n\t\t\t// \t</div>\r\n            // </div>\r\n            <div className=\"today--section container\">\r\n                    <h2>Current Price</h2>\r\n                    <div className=\"columns today--section__box\">\r\n                        <div className=\"column btc--section\">\r\n                            <h5>${this.state.btcprice}</h5>\r\n                            <p>1 BTC</p>\r\n                        </div>\r\n                        <div className=\"column eth--section\">\r\n                            <h5>${this.state.ethprice}</h5>\r\n                            <p>1 ETH</p>\r\n                        </div>\r\n                        <div className=\"column ltc--section\">\r\n                            <h5>${this.state.ltcprice}</h5>\r\n                            <p>1 LTC</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Today;","import React, { Component } from 'react';\nimport './App.css';\nimport HaaderComponent from '../../component/Header/header';\n// import Fibonacci from '../../component/Fibonacci/fibonacci';\nimport Login from '../../component/Login/login';\n\nimport Main from '../../component/main'\nimport Today from '../../component/Today/today';\nimport History from '../../component/History/history';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        < HaaderComponent />\n        <Main />\n        {/* <Login /> */}\n        {/* <div className=\"results--section__inner\">\n          <Today />\n          <History />\n        </div> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\r\nimport './history.css'\r\nimport moment from 'moment';\r\nimport axios from 'axios'\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nclass History extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            todayprice: {},\r\n            selectedDate: new Date()\r\n        }\r\n        this.getBTCPrices = this.getBTCPrices.bind(this);\r\n        this.getETHPrices = this.getETHPrices.bind(this);\r\n        this.getLTCPrices = this.getLTCPrices.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n    // This function gets the ETH price for a specific timestamp/date. The date is passed in as an argument\r\n    getETHPrices(date) {\r\n        return axios.get('https://min-api.cryptocompare.com/data/pricehistorical?fsym=ETH&tsyms=USD&ts=' + date);\r\n    }\r\n    // This function gets the BTC price for a specific timestamp/date. The date is passed in as an argument\r\n    getBTCPrices(date) {\r\n        return axios.get('https://min-api.cryptocompare.com/data/pricehistorical?fsym=BTC&tsyms=USD&ts=' + date);\r\n    }\r\n    // This function gets the LTC price for a specific timestamp/date. The date is passed in as an argument\r\n    getLTCPrices(date) {\r\n        return axios.get('https://min-api.cryptocompare.com/data/pricehistorical?fsym=LTC&tsyms=USD&ts=' + date);\r\n    }\r\n    // This function gets the prices for the current date.\r\n    getSelectedDayPrice() {\r\n        // Get today's date in timestamp\r\n        let t = moment().unix(this.state.selectedDate);\r\n        // axios.all is used to make concurrent API requests. These requests were the functions we first created and they accept an argument of the date required.\r\n        axios.all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\r\n            .then(axios.spread((eth, btc, ltc) => {\r\n                let f = {\r\n                    date: moment.unix(t).format(\"MMMM Do YYYY\"),\r\n                    eth: eth.data.ETH.USD,\r\n                    btc: btc.data.BTC.USD,\r\n                    ltc: ltc.data.LTC.USD\r\n                }\r\n                // Set the state of todayprice to the content of the object f\r\n                this.setState({ todayprice: f });\r\n            }));\r\n    }\r\n    handleChange(date) {\r\n        this.setState({\r\n            selectedDate: date\r\n        });\r\n        this.getSelectedDayPrice();\r\n    }\r\n    // This is called when an instance of a component is being created and inserted into the DOM.\r\n    componentWillMount() {\r\n        this.getSelectedDayPrice();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"history--section container\">\r\n                <div className=\"history--section__box\">\r\n                    <label>Select Date</label>\r\n                    <DatePicker\r\n                        selected={this.state.selectedDate}\r\n                        onChange={this.handleChange}\r\n                    />\r\n                    <div className=\"history--section__box__inner\">\r\n                        <div className=\"columns\">\r\n                            <div className=\"column\">\r\n                                <p>1 BTC = ${this.state.todayprice.btc}</p>\r\n                            </div>\r\n                            <div className=\"column\">\r\n                                <p>1 ETH = ${this.state.todayprice.eth}</p>\r\n                            </div>\r\n                            <div className=\"column\">\r\n                                <p>1 LTC = ${this.state.todayprice.ltc}</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default History;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      console.log(\"loading...\");\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\nlet deferredPrompt;\nlet btnAdd;\nwindow.addEventListener('beforeinstallprompt', (e) => {\n  // Prevent Chrome 67 and earlier from automatically showing the prompt\n  // e.preventDefault();\n  // Stash the event so it can be triggered later.\n  window.addEventListener('click', (some) => {\n    console.log(\"some\", some);\n    e.prompt();\n  });\n});\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './component/app/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}