{"version":3,"sources":["logo.svg","component/Header/header.js","component/seriesList/seriesList.js","component/Today/today.js","component/History/history.js","component/app/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","HaaderComponent","react_default","a","createElement","className","style","width","src","logo","alt","Component","Today","state","btcprice","ltcprice","ethprice","saveStateToLocalStorage","localStorage","setItem","JSON","stringify","_this","restoreStateFromLocalStorage","parse","getItem","setState","data","axios","post","prices","then","console","log","catch","error","_this2","this","navigator","onLine","pusher","Pusher","cluster","encrypted","subscribe","get","_ref","_ref$data","BTC","ETH","LTC","USD","bind","_ref2","_ref2$prices","clearInterval","cryptoSubscription","_this$state","History","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","todayprice","selectedDate","Date","getBTCPrices","assertThisInitialized","getETHPrices","getLTCPrices","handleChange","date","t","moment","unix","all","spread","eth","btc","ltc","f","format","getSelectedDayPrice","es","selected","onChange","App","header","Today_today","component_History_history","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","addEventListener","e","some","prompt","evt","ReactDOM","render","BrowserRouter","component_app_App","document","getElementById","URL","process","href","origin","concat","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7224d01b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport logo from '../../logo.svg';\r\n\r\nclass HaaderComponent extends Component {\r\n    render() {\r\n        return (\r\n            <header className=\"App-header\">\r\n                <img style={{ width: 100 }} src={logo} className=\"App-logo\" alt=\"logo\" />\r\n            </header>\r\n        )\r\n    }\r\n};\r\nexport default HaaderComponent;","import React, { Component } from 'react';\r\nimport 'whatwg-fetch';\r\n\r\n\r\nclass Series extends Component {\r\n    componentDidMount() {\r\n        // let myheaders = {\r\n        //   \"Content-Type\": \"application/json\",\r\n        //   \"Authorization\": \"Basic 1 eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1c2Vycy9Uek1Vb2NNRjRwIiwiZXhwIjoxNjA5MzUzMDAwLCJuYW1lIjoiTmF2bmVldCIsInBhc3N3b3JkIjoiTmF2bmVldEAxMjMiLCJzY29wZSI6InNlbGYsZ3JvdXBzL2FkbWlucyJ9.Xs4JkdlF4FnOnglixlbhNAntLeoxtwR1hDUu8JEy03E\"\r\n        // }\r\n        fetch('https://jsonplaceholder.typicode.com/todos')\r\n            .then(resp => resp.json()).then(result => {\r\n                this.setState({ series: result });\r\n            }\r\n            );\r\n    }\r\n    state = {\r\n        series: []\r\n    }\r\n    render() {\r\n        return (\r\n            <ul>\r\n                {this.state.series.map(item => (\r\n                    <li key={item.id}>\r\n                        {item.title}\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Series;","import React, { Component } from 'react';\r\nimport './today.css'\r\nimport axios from 'axios'\r\nimport Pusher from 'pusher-js'\r\n// import { CryptoPrice } from \"./CryptoPrice\";\r\n\r\nclass Today extends Component {\r\n\t/**\r\n\t * If you're not using the props to initialize your state, you can\r\n\t * just define the state like this and remove the constructor\r\n\t */\r\n\tstate = {\r\n\t\tbtcprice: 0, // I guess you can keep it an empty string, I just think its better to give it a default value of 0 since they're numbers\r\n\t\tltcprice: 0,\r\n\t\tethprice: 0\r\n\t};\r\n\r\n\tsendPricePusher(data) {\r\n\t\taxios.post('/prices/new', {\r\n\t\t\tprices: data\r\n\t\t})\r\n\t\t\t.then(console.log)\r\n\t\t\t.catch(console.error) // if you do (x => yourFunc(x)) you can replace it with (yourFunc)\r\n\t}\r\n\r\n\t/**\r\n\t * ComponentWillMount is deprecated and should never be used\r\n\t * The only exception is:\r\n\t * When doing Server Side Rendering, this is the only lifecycle method called\r\n\t *\r\n\t * Source: https://facebook.github.io/react/docs/react-component.html\r\n\t */\r\n\tcomponentWillMount() { }\r\n\r\n\t/**\r\n\t * Let's create utilitary functions to keep our code D.R.Y.\r\n\t * Btw, in our use case it's perfectly fine to save the entire state here\r\n\t */\r\n\tsaveStateToLocalStorage = () => {\r\n\t\tlocalStorage.setItem('today-state', JSON.stringify(this.state));\r\n\t};\r\n\r\n\trestoreStateFromLocalStorage = () => {\r\n\t\tconst state = JSON.parse(localStorage.getItem('today-state'));\r\n\t\tthis.setState(state);\r\n\t};\r\n\r\n\tcomponentDidMount() {\r\n\t\tif (!navigator.onLine) {\r\n\t\t\treturn this.restoreStateFromLocalStorage();\r\n\t\t}\r\n\t\tthis.pusher = new Pusher('cc5fc725ab70b851282b', {\r\n\t\t\tcluster: 'ap2',\r\n\t\t\tencrypted: true\r\n\t\t});\r\n\t\tthis.prices = this.pusher.subscribe('coin-prices');\r\n\t\taxios.get('https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,LTC&tsyms=USD')\r\n\t\t\t.then(({ data: { BTC, ETH, LTC } }) => { // Since we're never using responseh or data directly might aswell deconstruct it here\r\n\t\t\t\t/**\r\n\t\t\t\t * Avoid calling setStates multiple times, just do every calls in one go and let react\r\n\t\t\t\t * handle the batching\r\n\t\t\t\t */\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tbtcprice: BTC.USD,\r\n\t\t\t\t\tethprice: ETH.USD,\r\n\t\t\t\t\tltcprice: LTC.USD\r\n\t\t\t\t}, this.saveStateToLocalStorage); // You can pass a callback function to setState\r\n\r\n\t\t\t})\r\n\t\t\t.catch(console.error);\r\n\t\t// Let's store this interval in our class so that we can remove it in componentWillUnmount\r\n\t\t// this.cryptoSubscription = setInterval(() => {\r\n\t\t// \taxios.get('https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,LTC&tsyms=USD')\r\n\t\t// \t\t.then(({ data }) => { // This is a style question, I prefed doing it this way, to each its own\r\n\t\t// \t\t\tthis.sendPricePusher(data)\r\n\t\t// \t\t})\r\n\t\t// \t\t.catch(console.error)\r\n\t\t// }, 10000);\r\n\t\tthis.prices.bind('prices', ({ prices: { BTC, ETH, LTC } }) => {\r\n\t\t\tthis.setState({\r\n\t\t\t\tbtcprice: BTC.USD,\r\n\t\t\t\tethprice: ETH.USD,\r\n\t\t\t\tltcprice: LTC.USD\r\n\t\t\t}, this.saveStateToLocalStorage);\r\n\t\t}, this);\r\n\t}\r\n\r\n\tcomponentWillUnmount() {\r\n\t\tclearInterval(this.cryptoSubscription);\r\n\t}\r\n\r\n\trender() {\r\n\t\t// Let's extract everything uptop to keep our render method cleaner ;)\r\n\t\tconst { ethprice, btcprice, ltcprice } = this.state;\r\n\t\treturn (\r\n\t\t\t// <div className=\"today--section container\">\r\n\t\t\t// \t<h2>Current Price</h2>\r\n\t\t\t// \t<div className=\"columns today--section__box\">\r\n\t\t\t// \t\t{/** Creating components for things that repeat themselves is also pretty good**/}\r\n\t\t\t// \t\t<CryptoPrice currency=\"btc\" price={btcprice} />\r\n\t\t\t// \t\t<CryptoPrice currency=\"eth\" price={ethprice} />\r\n\t\t\t// \t\t<CryptoPrice currency=\"ltc\" price={ltcprice} />\r\n\t\t\t// \t</div>\r\n            // </div>\r\n            <div className=\"today--section container\">\r\n                    <h2>Current Price</h2>\r\n                    <div className=\"columns today--section__box\">\r\n                        <div className=\"column btc--section\">\r\n                            <h5>${this.state.btcprice}</h5>\r\n                            <p>1 BTC</p>\r\n                        </div>\r\n                        <div className=\"column eth--section\">\r\n                            <h5>${this.state.ethprice}</h5>\r\n                            <p>1 ETH</p>\r\n                        </div>\r\n                        <div className=\"column ltc--section\">\r\n                            <h5>${this.state.ltcprice}</h5>\r\n                            <p>1 LTC</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Today;","import React, { Component } from 'react';\r\nimport './history.css'\r\nimport moment from 'moment';\r\nimport axios from 'axios'\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nclass History extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            todayprice: {},\r\n            selectedDate: new Date()\r\n        }\r\n        this.getBTCPrices = this.getBTCPrices.bind(this);\r\n        this.getETHPrices = this.getETHPrices.bind(this);\r\n        this.getLTCPrices = this.getLTCPrices.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n    // This function gets the ETH price for a specific timestamp/date. The date is passed in as an argument\r\n    getETHPrices(date) {\r\n        return axios.get('https://min-api.cryptocompare.com/data/pricehistorical?fsym=ETH&tsyms=USD&ts=' + date);\r\n    }\r\n    // This function gets the BTC price for a specific timestamp/date. The date is passed in as an argument\r\n    getBTCPrices(date) {\r\n        return axios.get('https://min-api.cryptocompare.com/data/pricehistorical?fsym=BTC&tsyms=USD&ts=' + date);\r\n    }\r\n    // This function gets the LTC price for a specific timestamp/date. The date is passed in as an argument\r\n    getLTCPrices(date) {\r\n        return axios.get('https://min-api.cryptocompare.com/data/pricehistorical?fsym=LTC&tsyms=USD&ts=' + date);\r\n    }\r\n    // This function gets the prices for the current date.\r\n    getSelectedDayPrice() {\r\n        // Get today's date in timestamp\r\n        let t = moment().unix(this.state.selectedDate);\r\n        // axios.all is used to make concurrent API requests. These requests were the functions we first created and they accept an argument of the date required.\r\n        axios.all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\r\n            .then(axios.spread((eth, btc, ltc) => {\r\n                let f = {\r\n                    date: moment.unix(t).format(\"MMMM Do YYYY\"),\r\n                    eth: eth.data.ETH.USD,\r\n                    btc: btc.data.BTC.USD,\r\n                    ltc: ltc.data.LTC.USD\r\n                }\r\n                // Set the state of todayprice to the content of the object f\r\n                this.setState({ todayprice: f });\r\n            }));\r\n    }\r\n    handleChange(date) {\r\n        this.setState({\r\n            selectedDate: date\r\n        });\r\n        this.getSelectedDayPrice();\r\n    }\r\n    // This is called when an instance of a component is being created and inserted into the DOM.\r\n    componentWillMount() {\r\n        this.getSelectedDayPrice();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"history--section container\">\r\n                <div className=\"history--section__box\">\r\n                    <label>Select Date</label>\r\n                    <DatePicker\r\n                        selected={this.state.selectedDate}\r\n                        onChange={this.handleChange}\r\n                    />\r\n                    <div className=\"history--section__box__inner\">\r\n                        <div className=\"columns\">\r\n                            <div className=\"column\">\r\n                                <p>1 BTC = ${this.state.todayprice.btc}</p>\r\n                            </div>\r\n                            <div className=\"column\">\r\n                                <p>1 ETH = ${this.state.todayprice.eth}</p>\r\n                            </div>\r\n                            <div className=\"column\">\r\n                                <p>1 LTC = ${this.state.todayprice.ltc}</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default History;","import React, { Component } from 'react';\nimport './App.css';\nimport HaaderComponent from '../../component/Header/header';\nimport Main from '../../component/main'\nimport Today from '../../component/Today/today';\nimport History from '../../component/History/history';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        < HaaderComponent />\n        <div className=\"results--section__inner\">\n          <Today />\n          <History />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      console.log(\"loading...\");\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\nlet deferredPrompt;\nlet btnAdd;\nwindow.addEventListener('beforeinstallprompt', (e) => {\n  console.log(\"e\",e);\n  // Prevent Chrome 67 and earlier from automatically showing the prompt\n  // e.preventDefault();\n  // Stash the event so it can be triggered later.\n  // deferredPrompt = e;\n  // btnAdd.style.display = 'block';\n  window.addEventListener('click', (some) => {\n    console.log(\"some\",some);\n    e.prompt();\n  });\n});\nwindow.addEventListener('appinstalled', (evt) => {\n  console.log(evt)\n});\n// deferredPrompt.prompt();\n// window.addEventListener('click', (e) => {\n  // hide our user interface that shows our A2HS button\n  // btnAdd.style.display = 'none';\n  // Show the prompt\n  // e.prompt();\n  // Wait for the user to respond to the prompt\n  // deferredPrompt.userChoice\n  //   .then((choiceResult) => {\n  //     if (choiceResult.outcome === 'accepted') {\n  //       console.log('User accepted the A2HS prompt');\n  //     } else {\n  //       console.log('User dismissed the A2HS prompt');\n  //     }\n  //     deferredPrompt = null;\n  //   });\n// });\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './component/app/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}